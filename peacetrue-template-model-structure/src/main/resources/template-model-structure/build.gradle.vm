buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        classpath('com.github.peacetrue.generator:peacetrue-generator-plugin:1.0.0-SNAPSHOT')
        classpath 'com.github.peacetrue.template:peacetrue-template-model-content:1.0.0-SNAPSHOT', {
            exclude group: 'ch.qos.logback'
        }
        classpath('com.h2database:h2:1.4.196')
    }
}

plugins {
    id("java-library")
    id("io.spring.dependency-management") version "1.0.8.RELEASE"
//    id("org.springframework.boot") version "1.5.20.RELEASE" apply(false)
    id("maven-publish")
    id("signing")
    id("idea")
}

apply plugin: 'com.github.peacetrue.generator'
peacetrueGenerate {
    properties = [
            'peacetrue.generator.target-path': "${esc.d}rootDir",
            'spring.datasource.schema'       : "file:${esc.d}rootDir/${project-name}-service-mybatis/src/main/resources/schema-h2.sql",
    ]
    propertiesPath = "file:${esc.d}rootDir/${project-name}-service-mybatis/src/main/resources/application-${domain-name}-service.properties"
    context = [
            'project-name'     : "${project-name}",
            'basePackageName'  : "${basePackageName}",
            'DomainName'       : '$DomainName',
            'domainDescription': '$domainDescription',
    ]
}


allprojects { project ->

    group "com.github.peacetrue.$domainname"
    version "1.0.0-SNAPSHOT"
    description "$domainDescription"

    apply plugin: "java"
    apply plugin: "java-library"
    sourceCompatibility = 8
    targetCompatibility = 8

    apply plugin: "idea"
    idea {
        module {
            inheritOutputDirs = false
            outputDir = tasks.compileJava.destinationDir
            testOutputDir = tasks.compileTestJava.destinationDir
            downloadSources = false
            downloadJavadoc = false
        }
    }

    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
        jcenter()
    }

    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:1.5.20.RELEASE"
//            mavenBom "org.springframework.boot:spring-boot-dependencies:2.1.8.RELEASE"
            mavenBom "com.github.peacetrue:peacetrue-dependencies:1.0.4-SNAPSHOT"
//            mavenBom "com.github.peacetrue:peacetrue-dependencies:2.0.0-SNAPSHOT"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        implementation("com.google.code.findbugs:jsr305")

        testImplementation "junit:junit"
        testImplementation "com.github.peacetrue:peacetrue-test:1.0.0-SNAPSHOT"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testImplementation "ch.qos.logback:logback-classic"
        testImplementation 'io.github.benas:random-beans'
    }

    sourceSets {
        test {
            resources {
                srcDirs "src/test/resources", "src/test/java"
            }
        }
    }


    task antoraCopySourceToExample() {
        doLast {
            def path = "${esc.d}{rootDir.path}/docs/antora/modules/ROOT/examples/${esc.d}{project.name}"
            delete {
                delete(path)
            }
            copy {
                from sourceSets.main.allSource into(path)
            }
            copy {
                from sourceSets.test.allSource into(path)
            }
        }
    }

    if (project.name.endsWith("sample")) return


    java {
        withJavadocJar()
        withSourcesJar()
    }

    def repository_snapshots = "https://oss.sonatype.org/content/repositories/snapshots/"
    def repository_releases = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

    apply plugin: "maven-publish"
    apply plugin: "signing"
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/peacetrue/${project.name}"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "xiayouxue"
                            name = "xiayouxue"
                            email = "xiayouxue@hotmail.com"
                        }
                    }
                    scm {
                        connection = "https://github.com/peacetrue/${project.name}.git"
                        developerConnection = "https://github.com/peacetrue/${project.name}.git"
                        url = "https://github.com/peacetrue/peacetrue/${project.name}"
                    }
                }


            }
        }

        repositories {
            if (gradle.hasProperty('ossrhUsername')) {
                maven {
                    url version.endsWith("SNAPSHOT") ? repository_snapshots : repository_releases
                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }

        if (!version.endsWith("SNAPSHOT")) {
            signing {
                sign publishing.publications.mavenJava
            }
        }

        javadoc {
            if (JavaVersion.current().isJava9Compatible()) {
                options.addBooleanOption('html5', true)
            }
        }
    }
}


dependencies {
    api "org.slf4j:slf4j-api"
    implementation "org.springframework:spring-core"
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.boot:spring-boot-starter-logging'
}





