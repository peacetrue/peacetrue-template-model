package ${basePackageName};

import com.github.peacetrue.beans.properties.id.IdCapable;
import com.github.peacetrue.core.OperatorCapable;
import com.github.peacetrue.core.Operators;
import com.github.peacetrue.spring.data.domain.SortUtils;
import com.github.peacetrue.spring.data.r2dbc.core.ConventionR2dbcEntityOperationsUtils;
import com.github.peacetrue.spring.data.relational.core.query.CriteriaUtils;
import com.github.peacetrue.spring.data.relational.core.query.UpdateUtils;
import com.github.peacetrue.spring.beans.BeanUtils;
import com.github.peacetrue.util.DateUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.PayloadApplicationEvent;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.r2dbc.core.R2dbcEntityOperations;
import org.springframework.data.relational.core.query.Criteria;
import org.springframework.data.relational.core.query.Query;
import org.springframework.data.relational.core.query.Update;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.function.Consumer;
import java.util.function.Function;

import static com.github.peacetrue.spring.data.relational.core.query.ConventionCriteriaUtils.buildProfileCriteria;

/**
 * ${nationalName}服务实现
 *
 * @author peace
 */
@Slf4j
@Service
public class ${ModuleName}ServiceImpl implements ${ModuleName}Service {

    @Autowired
    private R2dbcEntityOperations entityOperations;
    @Autowired
    private ApplicationEventPublisher eventPublisher;

    public static Criteria buildCriteria(${ModuleName}Query params) {
        return CriteriaUtils.and(
                #foreach($property in $properties)
                    #if($property.name == $id.name)
                    CriteriaUtils.nullableCriteria(CriteriaUtils.smartIn("$property.name"), params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'Integer'||$property.type.simpleName == 'Long')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::is, params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'String')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::like, value -> "%" + value + "%", params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'Date' || $property.type.simpleName == 'LocalDateTime')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::greaterThanOrEquals, params.get${lc.uc($property.name)}()::getLowerBound),
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::lessThan, DateUtils.DATE_CELL_EXCLUDE, params.get${lc.uc($property.name)}()::getUpperBound)#if($foreach.hasNext),#end
                    #end
                #end
        );
    }

    @Override
    @Transactional
    public ${ModuleName}VO add(${ModuleName}Add params) {
        log.info("新增${nationalName}信息[{}]", params);
        ${ModuleName} entity = BeanUtils.convert(params, ${ModuleName}.class);
        #if($modifierId)
            Operators.setCreateModify(params, entity);
        #elseif($creatorId)
            Operators.setCreate(params, entity);
        #end
        return entityOperations.insert(entity)
                .map(item -> BeanUtils.convert(item, ${ModuleName}VO.class))
                .doOnNext(item -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(item, params)));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<${ModuleName}VO> query(${ModuleName}Query params, Pageable pageable, String... projection) {
        log.info("分页查询${nationalName}信息[{}]", params);
        Criteria where = buildCriteria(params);
        return entityOperations.count(Query.query(where), ${ModuleName}.class)
                .flatMap(total -> {
                    if (total == 0L) return Mono.just(new PageImpl<>(Collections.emptyList(), pageable, 0L));
                    Query query = Query.query(where).with(pageable).sort(pageable.getSortOr(SortUtils.SORT_CREATED_TIME_DESC));
                    return entityOperations.select(query, ${ModuleName}.class)
                            .map(item -> BeanUtils.convert(item, ${ModuleName}VO.class))
                            .collectList()
                            .doOnNext(item -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(item, params)))
                            .map(item -> new PageImpl<>(item, pageable, total))
                            ;
                })
                ;
    }

    @Override
    @Transactional(readOnly = true)
    public ${ModuleName}VO query(${ModuleName}Query params, Sort sort, String... projection) {
        log.info("全量查询${nationalName}信息[{}]", params);
        Criteria where = buildCriteria(params);
        Query query = Query.query(where).sort(sort).limit(100);
        return entityOperations.select(query, ${ModuleName}.class)
                .map(item -> BeanUtils.convert(item, ${ModuleName}VO.class))
                .doOnNext(item -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(item, params)))
        ;
    }

    @Override
    @Transactional(readOnly = true)
    public ${ModuleName}VO query(${ModuleName}Query params, String... projection) {
        return query(params, SortUtils.SORT_CREATED_TIME_DESC, projection);
    }

    private ${ModuleName}> selectOne(IdCapable<? params) {
        return ConventionR2dbcEntityOperationsUtils
                .selectOneOwned(entityOperations::selectOne, ${ModuleName}.class, params)
                .doOnNext(entity -> log.debug("取得${nationalName}信息[{}]", entity))
        ;
    }

    private ${ModuleName}> selectOne(Query query, IdCapable<? params) {
        return ConventionR2dbcEntityOperationsUtils
                .selectOneOwned(entityOperations::selectOne, query, ${ModuleName}.class, params)
                .doOnNext(entity -> log.debug("取得${nationalName}信息[{}]", entity))
        ;
    }

    @Override
    @Transactional(readOnly = true)
    public ${ModuleName}VO get(${ModuleName}Get params, String... projection) {
        log.info("获取${nationalName}信息[{}]", params);
        return selectOne(params)
                .map(item -> BeanUtils.convert(item, ${ModuleName}VO.class))
                .doOnNext(item -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(item, params)))
                ;
    }

    @Override
    @Transactional
    public Integer modify(${ModuleName}Modify params) {
        log.info("修改${nationalName}信息[{}]", params);
        return this.modifyGeneric(params);
    }

    private <T extends IdCapable<$id.type.simpleName> & OperatorCapable<$id.type.simpleName>> Integer modifyGeneric(T params) {
        Query query = Query.query(buildProfileCriteria(params));
        return selectOne(query, params)
                .flatMap(entity -> {
                    ${ModuleName} modify = BeanUtils.convert(params, ${ModuleName}.class);
                    modify.setCreatorId(null);//不更新创建者
                    Update update = UpdateUtils.setModify(UpdateUtils.selectiveUpdateFromExample(modify), params);
                    return entityOperations.update(query, update, ${ModuleName}.class)
                            .doOnNext(count -> log.debug("修改${nationalName}信息[{}]}影响[{}]行", params.getId(), count))
                            .doOnNext(count -> {
                                if (count == 0) return;
                                ${ModuleName}VO vo = BeanUtils.convert(entity, ${ModuleName}VO.class);
                                BeanUtils.copyProperties(params, vo, BeanUtils.EMPTY_PROPERTY_VALUE);
                                eventPublisher.publishEvent(new PayloadApplicationEvent<>(vo, params));
                            });
                })
                ;
    }

    @Override
    @Transactional
    public Integer delete(${ModuleName}Delete params) {
        log.info("删除${nationalName}信息[{}]", params);
        Query query = Query.query(buildProfileCriteria(params));
        return selectOne(query, params)
                .flatMap(entity -> entityOperations.delete(query, ${ModuleName}.class)
                        .doOnNext(count -> log.debug("删除${nationalName}[{}]影响[{}]行", params.getId(), count))
                        .doOnNext(publishEvent(entity, params)))
                ;
    }

    private Consumer<Integer> publishEvent(${ModuleName} entity, Object params) {
        return integer -> {
            if (integer == 0) return;
            ${ModuleName}VO vo = BeanUtils.convert(entity, ${ModuleName}VO.class);
            eventPublisher.publishEvent(new PayloadApplicationEvent<>(vo, params));
        };
    }
}
