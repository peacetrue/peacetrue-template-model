package ${basePackageName};

import com.github.peacetrue.core.Range;
import com.github.peacetrue.spring.data.relational.core.query.CriteriaUtils;
import com.github.peacetrue.spring.data.relational.core.query.UpdateUtils;
import com.github.peacetrue.util.DateUtils;
import com.github.peacetrue.spring.util.BeanUtils;
import com.github.peacetrue.util.StreamUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.PayloadApplicationEvent;
import org.springframework.data.domain.*;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import org.springframework.data.relational.core.query.Criteria;
import org.springframework.data.relational.core.query.Query;
import org.springframework.data.relational.core.query.Update;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.function.Tuple2;

import javax.annotation.Nullable;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.time.LocalDateTime;

/**
 * ${nationalName}服务实现
 *
 * @author xiayx
 */
@Slf4j
@Service
public class ${ModuleName}ServiceImpl implements ${ModuleName}Service {

    @Autowired
    private R2dbcEntityTemplate entityTemplate;
    @Autowired
    private ApplicationEventPublisher eventPublisher;

    public static Criteria buildCriteria(${ModuleName}Query params) {
        return CriteriaUtils.and(
                #foreach($property in $properties)
                    #if($property.name == $id.name)
                    CriteriaUtils.nullableCriteria(CriteriaUtils.smartIn("$property.name"), params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'Integer'||$property.type.simpleName == 'Long')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::is, params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'String')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::like, value -> "%" + value + "%", params::get${lc.uc($property.name)})#if($foreach.hasNext),#end
                    #elseif($property.type.simpleName == 'Date' || $property.type.simpleName == 'LocalDateTime')
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::greaterThanOrEquals, params.get${lc.uc($property.name)}()::getLowerBound),
                    CriteriaUtils.nullableCriteria(Criteria.where("$property.name")::lessThan, DateUtils.DATE_CELL_EXCLUDE, params.get${lc.uc($property.name)}()::getUpperBound)#if($foreach.hasNext),#end
                    #end
                #end
        );
    }

    @Override
    @Transactional
    public Mono<${ModuleName}VO> add(${ModuleName}Add params) {
        log.info("新增${nationalName}信息[{}]", params);
        ${ModuleName} entity = BeanUtils.map(params, ${ModuleName}.class);
        #if($creatorId)
            entity.setCreatorId(params.getOperatorId());
            entity.setCreatedTime(LocalDateTime.now());
        #end
        #if($modifierId)
            entity.setModifierId(entity.getCreatorId());
            entity.setModifiedTime(entity.getCreatedTime());
        #end
        return entityTemplate.insert(entity)
                .map(item -> BeanUtils.map(item, ${ModuleName}VO.class))
                .doOnNext(item -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(item, params)));
    }

    @Override
    @Transactional(readOnly = true)
    public Mono<Page<${ModuleName}VO>> query(@Nullable ${ModuleName}Query params, @Nullable Pageable pageable, String... projection) {
        log.info("分页查询${nationalName}信息[{}]", params);
        if (params == null) params = ${ModuleName}Query.DEFAULT;
        if (params.getCreatedTime() == null) params.setCreatedTime(Range.LocalDateTime.DEFAULT);
        #if($modifierId)
        if (params.getModifiedTime() == null) params.setModifiedTime(Range.LocalDateTime.DEFAULT);
        #end
        Pageable finalPageable = pageable == null ? PageRequest.of(0, 10) : pageable;
        Criteria where = buildCriteria(params);

        return entityTemplate.count(Query.query(where), ${ModuleName}.class)
                .flatMap(total -> total == 0L ? Mono.empty() : Mono.just(total))
                .<Page<${ModuleName}VO>>flatMap(total -> {
                    Query query = Query.query(where).with(finalPageable).sort(finalPageable.getSortOr(Sort.by("createdTime").descending()));
                    return entityTemplate.select(query, ${ModuleName}.class)
                            .map(item -> BeanUtils.map(item, ${ModuleName}VO.class))
                            .reduce(new ArrayList<>(), StreamUtils.reduceToCollection())
                            .map(item -> new PageImpl<>(item, finalPageable, total));
                })
                .switchIfEmpty(Mono.just(new PageImpl<>(Collections.emptyList(), finalPageable, 0L)));
    }

    @Override
    @Transactional(readOnly = true)
    public Flux<${ModuleName}VO> query(@Nullable ${ModuleName}Query params, @Nullable Sort sort, String... projection) {
        log.info("全量查询${nationalName}信息[{}]", params);
        if (params == null) params = ${ModuleName}Query.DEFAULT;
        if (params.getCreatedTime() == null) params.setCreatedTime(Range.LocalDateTime.DEFAULT);
        #if($modifierId)
            if (params.getModifiedTime() == null) params.setModifiedTime(Range.LocalDateTime.DEFAULT);
        #end
        if (sort == null) sort = Sort.by("createdTime").descending();
        Criteria where = buildCriteria(params);
        Query query = Query.query(where).sort(sort).limit(100);
        return entityTemplate.select(query, ${ModuleName}.class)
                .map(item -> BeanUtils.map(item, ${ModuleName}VO.class));
    }

    @Override
    @Transactional(readOnly = true)
    public Mono<${ModuleName}VO> get(${ModuleName}Get params, String... projection) {
        log.info("获取${nationalName}信息[{}]", params);
//        Criteria where = CriteriaUtils.and(
//                CriteriaUtils.nullableCriteria(Criteria.where("$id.name")::is, params::get${lc.uc($id.name)}),
//        );
        Criteria where = Criteria.where("$id.name").is(params.get${lc.uc($id.name)}());
        return entityTemplate.selectOne(Query.query(where), ${ModuleName}.class)
                .map(item -> BeanUtils.map(item, ${ModuleName}VO.class));
    }

    @Override
    @Transactional
    public Mono<Integer> modify(${ModuleName}Modify params) {
        log.info("修改${nationalName}信息[{}]", params);
        Criteria where = Criteria.where("$id.name").is(params.get${lc.uc($id.name)}());
        Query idQuery = Query.query(where);
        return entityTemplate.selectOne(idQuery, ${ModuleName}.class)
                .map(item -> BeanUtils.map(item, ${ModuleName}VO.class))
                .zipWhen(entity -> {
                    ${ModuleName} modify = BeanUtils.map(params, ${ModuleName}.class);
                    #if($modifierId)
                    modify.setModifierId(params.getOperatorId());
                    modify.setModifiedTime(LocalDateTime.now());
                    #end
                    Update update = UpdateUtils.selectiveUpdateFromExample(modify);
                    return entityTemplate.update(idQuery, update, ${ModuleName}.class);
                })
                .doOnNext(tuple2 -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(tuple2.getT1(), params)))
                .map(Tuple2::getT2)
                .switchIfEmpty(Mono.just(0));
    }

    @Override
    @Transactional
    public Mono<Integer> delete(${ModuleName}Delete params) {
        log.info("删除${nationalName}信息[{}]", params);
        Criteria where = Criteria.where("$id.name").is(params.get${lc.uc($id.name)}());
        Query idQuery = Query.query(where);
        return entityTemplate.selectOne(idQuery, ${ModuleName}.class)
                .map(item -> BeanUtils.map(item, ${ModuleName}VO.class))
                .zipWhen(region -> entityTemplate.delete(idQuery, ${ModuleName}.class))
                .doOnNext(tuple2 -> eventPublisher.publishEvent(new PayloadApplicationEvent<>(tuple2.getT1(), params)))
                .map(Tuple2::getT2)
                .switchIfEmpty(Mono.just(0));
    }

}
