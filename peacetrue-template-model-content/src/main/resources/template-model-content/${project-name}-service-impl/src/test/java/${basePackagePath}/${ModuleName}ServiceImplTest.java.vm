package ${basePackageName};

import com.github.peacetrue.spring.beans.BeanUtils;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.ActiveProfiles;
import reactor.test.StepVerifier;

import java.io.Serializable;

/**
 * @author : xiayx
 * @since : 2020-05-22 16:43
 **/
@SpringBootTest(classes = TestService${DomainName}AutoConfiguration.class)
@ActiveProfiles("${domain-name}-service-test")
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class ${ModuleName}ServiceImplTest {

    public static final EasyRandomParameters parameters = new EasyRandomParameters().randomize(Serializable.class, () -> 1L);
    public static final EasyRandom EASY_RANDOM = new EasyRandom(parameters);
    public static final ${ModuleName}Add ADD = EASY_RANDOM.nextObject(${ModuleName}Add.class);
    public static final ${ModuleName}Modify MODIFY = EASY_RANDOM.nextObject(${ModuleName}Modify.class);
    public static ${ModuleName}VO vo;

    static {
        ADD.setOperatorId(1L);
        MODIFY.setOperatorId(1L);
    }

    @Autowired
    private ${ModuleName}ServiceImpl service;

    @Test
    @Order(10)
    void add() {
        service.add(ADD)
                .as(StepVerifier::create)
                .assertNext(data -> {
                    Assertions.assertEquals(data.getCreatorId(), ADD.getOperatorId());
                    vo = data;
                })
                .verifyComplete();
    }

    @Test
    @Order(20)
    void queryForPage() {
        ${ModuleName}Query params = BeanUtils.convert(vo, ${ModuleName}Query.class);
        service.query(params, PageRequest.of(0, 10))
                .as(StepVerifier::create)
                .assertNext(page -> Assertions.assertEquals(1, page.getTotalElements()))
                .verifyComplete();
    }

    @Test
    @Order(30)
    void queryForList() {
        ${ModuleName}Query params = BeanUtils.convert(vo, ${ModuleName}Query.class);
        service.query(params)
                .as(StepVerifier::create)
                .expectNextCount(1)
                .verifyComplete();
    }

    @Test
    @Order(40)
    void get() {
        ${ModuleName}Get params = BeanUtils.convert(vo, ${ModuleName}Get.class);
        service.get(params)
                .as(StepVerifier::create)
                .assertNext(item -> Assertions.assertEquals(vo.get${lc.uc($id.name)}(), item.get${lc.uc($id.name)}()))
                .verifyComplete();
    }

    @Test
    @Order(50)
    void modify() {
        ${ModuleName}Modify params = MODIFY;
        params.set${lc.uc($id.name)}(vo.get${lc.uc($id.name)}());
        params.setCreatorId(null);
        service.modify(params)
                .as(StepVerifier::create)
                .expectNext(1)
                .verifyComplete();
    }

    @Test
    @Order(60)
    void delete() {
        ${ModuleName}Delete params = new ${ModuleName}Delete(vo.get${lc.uc($id.name)}());
        service.delete(params)
                .as(StepVerifier::create)
                .expectNext(1)
                .verifyComplete();
    }
}
