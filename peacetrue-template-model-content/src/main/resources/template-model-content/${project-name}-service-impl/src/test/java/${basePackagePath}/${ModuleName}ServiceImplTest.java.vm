package ${basePackageName};

import com.github.peacetrue.spring.util.BeanUtils;
import org.jeasy.random.EasyRandom;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration;
import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration;
import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration;
import org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import reactor.test.StepVerifier;

#setOperatorIdType($properties)
#setId($properties)

/**
 * @author : xiayx
 * @since : 2020-05-22 16:43
 **/
@ExtendWith(SpringExtension.class)
@SpringBootTest(classes = {
    TestService${DomainName}AutoConfiguration.class
})
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class ${ModuleName}ServiceImplTest {

    @Autowired
    private ${ModuleName}ServiceImpl service;
    private final EasyRandom easyRandom = new EasyRandom();
    private static ${ModuleName}VO vo;

    @Test
    @Order(10)
    void test001add() {
        ${ModuleName}Add params = easyRandom.nextObject(${ModuleName}Add.class);
        params.setOperatorId(easyRandom.nextObject(${operatorIdType}.class));
        service.add(params)
                .as(StepVerifier::create)
                .assertNext(data -> {
                    Assertions.assertEquals(data.getCode(), params.getCode());
                    vo = data;
                })
                .verifyComplete();
    }

    @Test
    @Order(20)
    void test002query() {
        ${ModuleName}Query params = BeanUtils.map(vo, ${ModuleName}Query.class);
        service.query(params, PageRequest.of(0, 10))
                .as(StepVerifier::create)
                .assertNext(page -> Assertions.assertEquals(1, page.getTotalElements()))
                .verifyComplete();
    }

    @Test
    @Order(30)
    void test003query() {
        ${ModuleName}Query params = BeanUtils.map(vo, ${ModuleName}Query.class);
        service.query(params)
                .as(StepVerifier::create)
                .expectNextCount(1)
                .verifyComplete();
    }

    @Test
    @Order(40)
    void test004get() {
        ${ModuleName}Get params = BeanUtils.map(vo, ${ModuleName}Get.class);
        service.get(params)
                .as(StepVerifier::create)
                .assertNext(item -> Assertions.assertEquals(vo.getId(), item.getId()))
                .verifyComplete();
    }

    @Test
    @Order(50)
    void test005modify() {
        ${ModuleName}Modify params = easyRandom.nextObject(${ModuleName}Modify.class);
        params.setId(vo.getId());
        service.modify(params)
                .as(StepVerifier::create)
                .expectNext(1)
                .verifyComplete();
    }

    @Test
    @Order(60)
    void test006delete() {
        ${ModuleName}Delete params = easyRandom.nextObject(${ModuleName}Delete.class);
        params.setId(vo.getId());
        service.delete(params)
                .as(StepVerifier::create)
                .expectNext(1)
                .verifyComplete();
    }
}
