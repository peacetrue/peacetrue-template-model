package ${basePackageName};

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * ${comment}控制器
 *
 * @author xiayx
 */
@Slf4j
@RestController
@RequestMapping(value = "/${module-name}s")
public class ${ModuleName}Controller {

    @Autowired
    private ${ModuleName}Service ${moduleName}Service;

    @PostMapping(consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public Mono<${ModuleName}VO> addByForm(${ModuleName}Add params) {
        log.info("新增${comment}信息(请求方法+表单参数)[{}]", params);
        return ${moduleName}Service.add(params);
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<${ModuleName}VO> addByJson(@RequestBody ${ModuleName}Add params) {
        log.info("新增${comment}信息(请求方法+JSON参数)[{}]", params);
        return ${moduleName}Service.add(params);
    }

    @GetMapping(params = "page")
    public Mono<Page<${ModuleName}VO>> query(${ModuleName}Query params, Pageable pageable, String... projection) {
        log.info("分页查询${comment}信息(请求方法+参数变量)[{}]", params);
        return ${moduleName}Service.query(params, pageable, projection);
    }

    @GetMapping
    public Flux<${ModuleName}VO> query(${ModuleName}Query params, Sort sort, String... projection) {
        log.info("全量查询${comment}信息(请求方法+参数变量)[{}]", params);
        return ${moduleName}Service.query(params, sort, projection);
    }

    @GetMapping("/{${id.name}}")
    public Mono<${ModuleName}VO> getByUrlPathVariable(@PathVariable ${id.type.simpleName} ${id.name}, String... projection) {
        log.info("获取${comment}信息(请求方法+路径变量)详情[{}]", ${id.name});
        return ${moduleName}Service.get(new ${ModuleName}Get(${id.name}), projection);
    }

    @RequestMapping("/get")
    public Mono<${ModuleName}VO> getByPath(${ModuleName}Get params, String... projection) {
        log.info("获取${comment}信息(请求路径+参数变量)详情[{}]", params);
        return ${moduleName}Service.get(params, projection);
    }

    @PutMapping(value = {"", "/*"}, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public Mono<Integer> modifyByForm(${ModuleName}Modify params) {
        log.info("修改${comment}信息(请求方法+表单参数)[{}]", params);
        return ${moduleName}Service.modify(params);
    }

    @PutMapping(value = {"", "/*"}, consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<Integer> modifyByJson(@RequestBody ${ModuleName}Modify params) {
        log.info("修改${comment}信息(请求方法+JSON参数)[{}]", params);
        return ${moduleName}Service.modify(params);
    }

    @DeleteMapping("/{${id.name}}")
    public Mono<Integer> deleteByUrlPathVariable(@PathVariable ${id.type.simpleName} ${id.name}) {
        log.info("删除${comment}信息(请求方法+URL路径变量)[{}]", ${id.name});
        return ${moduleName}Service.delete(new ${ModuleName}Delete(${id.name}));
    }

    @DeleteMapping(params = "${id.name}")
    public Mono<Integer> deleteByUrlParamVariable(${ModuleName}Delete params) {
        log.info("删除${comment}信息(请求方法+URL参数变量)[{}]", params);
        return ${moduleName}Service.delete(params);
    }

    @RequestMapping(path = "/delete")
    public Mono<Integer> deleteByPath(${ModuleName}Delete params) {
        log.info("删除${comment}信息(请求路径+URL参数变量)[{}]", params);
        return ${moduleName}Service.delete(params);
    }


}
